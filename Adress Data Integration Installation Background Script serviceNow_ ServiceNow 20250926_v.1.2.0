/***********************************************************************************************
 * SCRIPT: DAWA Integration Installation (v3.1.0 - Robust ACL Handling)
 * SCRIPT_VERSION = 'v3.1.0';
 * Formål: Opretter alle komponenter til DAWA-integration. Denne version sikrer korrekt
 * tilknytning af roller til eksisterende ACLs for at undgå installationsfejl.
 ***********************************************************************************************/
(function() {
    var SCRIPT_VERSION = 'v3.1.0';
    gs.info('### SETUP (' + SCRIPT_VERSION + '): Starting DAWA Integration Installation ###');
    var userSysId;
    var roleSysId;

    // ===== Trin 1: Opret den sikre integrationsbruger =====
    var userName = 'dawa.integration';
    var userGR = new GlideRecord('sys_user');
    if (!userGR.get('user_name', userName)) {
        gs.info('--> Creating user: ' + userName);
        userGR.initialize();
        userGR.setValue('user_name', userName);
        userGR.setValue('first_name', 'Integration');
        userGR.setValue('last_name', 'DAWA API');
        userGR.setValue('web_service_access_only', true);
        userGR.setValue('internal_integration_user', true);
        userGR.setValue('notification', 2); // Disable notifications
        userGR.setValue('source', 'Integration: DAWA Address Service (Scripted)');
        var tempPassword = new GlideSecureRandomUtil().getSecureRandomString(20);
        userGR.setUserPassword(tempPassword);
        userSysId = userGR.insert();
    } else {
        gs.info('--> User ' + userName + ' already exists. Updating and using existing user.');
        userSysId = userGR.getUniqueValue();
        userGR.setValue('internal_integration_user', true);
        userGR.update();
    }
    gs.info('--> User setup complete.');

    // ===== Trin 2: Opret Custom Rolle og tilknyt ACLs =====
    gs.info('--> Ensuring custom role "x_dawa.integrator" and linking to ACLs.');
    var roleName = 'x_dawa.integrator';
    var roleGR = new GlideRecord('sys_user_role');
    if (!roleGR.get('name', roleName)) {
        roleGR.initialize();
        roleGR.setValue('name', roleName);
        roleGR.setValue('description', 'Allows read/write access to cmn_location for DAWA integration');
        roleSysId = roleGR.insert();
    } else {
        roleSysId = roleGR.getUniqueValue();
    }

    // Forbedret funktion der tilføjer rollen til eksisterende ACLs
    function ensureAclLink(operation) {
        var aclGR = new GlideRecord('sys_security_acl');
        if (aclGR.get('name', 'cmn_location') && aclGR.get('operation.name', operation)) {
            var aclSysId = aclGR.getUniqueValue();
            var aclRoleGR = new GlideRecord('sys_security_acl_role');
            aclRoleGR.addQuery('sys_security_acl', aclSysId);
            aclRoleGR.addQuery('sys_user_role', roleSysId);
            aclRoleGR.query();
            if (!aclRoleGR.next()) {
                gs.info('---> Linking role to existing "' + operation + '" ACL for cmn_location.');
                aclRoleGR.initialize();
                aclRoleGR.setValue('sys_security_acl', aclSysId);
                aclRoleGR.setValue('sys_user_role', roleSysId);
                aclRoleGR.insert();
            } else {
                 gs.info('---> Link for "' + operation + '" ACL already exists.');
            }
        } else {
            gs.warn('---> WARNING: Could not find a standard "' + operation + '" ACL for cmn_location.');
        }
    }
    ensureAclLink('read');
    ensureAclLink('write');
    gs.info('--> Role and ACL setup complete.');

    // ===== Trin 3: Tildel roller til bruger =====
    var rolesToAssign = ['x_dawa.integrator', 'rest_service'];
    rolesToAssign.forEach(function(roleNameToAssign) {
        var role = new GlideRecord('sys_user_role');
        if (role.get('name', roleNameToAssign)) {
            var roleMapGR = new GlideRecord('sys_user_has_role');
            roleMapGR.addQuery('user', userSysId);
            roleMapGR.addQuery('role', role.getUniqueValue());
            roleMapGR.query();
            if (!roleMapGR.next()) {
                roleMapGR.initialize();
                roleMapGR.setValue('user', userSysId);
                roleMapGR.setValue('role', role.getUniqueValue());
                roleMapGR.insert();
                gs.info('--> Role "' + roleNameToAssign + '" assigned.');
            }
        }
    });
    gs.info('--> Role assignment complete.');

    // ===== Trin 4: Opret/opdater System Properties, Fields, UI Components =====
    gs.info('--> Ensuring core DAWA components (Properties, Fields, SI, UI etc.).');
    ensureProperty('x_bgb.dawa.base_url', 'https://api.dataforsyningen.dk', 'Base URL for DAWA (Dataforsyningen)');
    ensureProperty('x_bgb.dawa.country_allowlist', 'DK', 'Country allowlist for normalization (comma-separated ISO codes)');
    ensureField('cmn_location', 'u_dawa_adresse_id', 'DAWA Adresse ID', 'string', 64);
    ensureField('cmn_location', 'u_dawa_adgangsadresse_id', 'DAWA Adgangsadresse ID', 'string', 64);
    ensureField('cmn_location', 'u_kommune_kode', 'Kommune kode', 'string', 40);
    ensureField('cmn_location', 'u_kommune_navn', 'Kommune navn', 'string', 100);
    ensureUIComponents();
    gs.info('--> Core component setup complete.');


    // ===== Trin 5: Opret/opdater Script Include =====
    gs.info('--> Creating/updating Script Include: DAWAAddressClient');
    var siGR = new GlideRecord('sys_script_include');
    siGR.addQuery('name', 'DAWAAddressClient');
    siGR.query();
    var siExists = siGR.next();
    if (!siExists) { siGR.initialize(); }
    siGR.setValue('name', 'DAWAAddressClient');
    siGR.setValue('script', getDAWAScriptIncludeCode());
    siGR.setValue('active', true);
    siGR.setValue('access', 'public');
    if (siExists) { siGR.update(); } else { siGR.insert(); }
    gs.info('--> Script Include setup complete.');


    // ===== Trin 6: Opret/opdater de planlagte jobs =====
    gs.info('--> Creating/updating Sync Job: DAWA Data Weekly Sync');
    var syncJobGR = new GlideRecord('sysauto_script');
    syncJobGR.addQuery('name', 'DAWA Data Weekly Sync');
    syncJobGR.query();
    var syncJobExists = syncJobGR.next();
    if (!syncJobExists) { syncJobGR.initialize(); }
    syncJobGR.setValue('name', 'DAWA Data Weekly Sync');
    syncJobGR.setValue('script', 'gs.info("Starting scheduled DAWA data sync."); new DAWAAddressClient().syncAllDanishLocations();');
    syncJobGR.setValue('active', true);
    syncJobGR.setValue('run_type', 'periodically');
    syncJobGR.setValue('run_dayofweek', '7'); // Sunday
    syncJobGR.setValue('run_time', '03:00:00');
    syncJobGR.setValue('run_as', userSysId);
    if (syncJobExists) { syncJobGR.update(); } else { syncJobGR.insert(); }

    gs.info('--> Creating/updating Monitoring Job: DAWA Data Consistency Check');
    var monitorJobGR = new GlideRecord('sysauto_script');
    monitorJobGR.addQuery('name', 'DAWA Data Consistency Check');
    monitorJobGR.query();
    var monitorJobExists = monitorJobGR.next();
    if (!monitorJobExists) { monitorJobGR.initialize(); }
    var consistencyScript = 'try{gs.info("=== DAWA Consistency Check ===");var total=0,issues=0;var locGR=new GlideRecord("cmn_location");locGR.addQuery("country","DK").addOrCondition("country","Denmark");locGR.query();while(locGR.next()){total++;if(!locGR.getValue("u_dawa_adresse_id")){issues++;}}var qualityScore=total>0?Math.round(((total-issues)/total)*100):100;gs.info("DK Locations: "+total+", Missing DAWA ID: "+issues+", Quality: "+qualityScore+"%");gs.setProperty("dawa.check.last_run",gs.nowDateTime());gs.setProperty("dawa.check.quality_score",qualityScore);}catch(e){gs.error("DAWA Consistency check error: "+e.message);}';
    monitorJobGR.setValue('name', 'DAWA Data Consistency Check');
    monitorJobGR.setValue('script', consistencyScript);
    monitorJobGR.setValue('active', true);
    monitorJobGR.setValue('run_type', 'monthly');
    monitorJobGR.setValue('run_dayofmonth', '1');
    monitorJobGR.setValue('run_time', '02:00:00');
    monitorJobGR.setValue('run_as', userSysId);
    if (monitorJobExists) { monitorJobGR.update(); } else { monitorJobGR.insert(); }
    gs.info('--> Scheduled Jobs setup complete.');

    // ===== Trin 7: Kør en indledende synkronisering =====
    gs.info('--> Triggering initial data sync in the background. Check logs for "DAWAAddressClient" for status.');
    var initialSyncJob = new GlideRecord('sysauto_script');
    initialSyncJob.initialize();
    initialSyncJob.setValue('name', 'TEMP - Initial DAWA Data Sync (' + new GlideDateTime().getDisplayValue() + ')');
    initialSyncJob.setValue('run_type', 'on_demand');
    initialSyncJob.setValue('active', true);
    initialSyncJob.setValue('run_as', userSysId);
    initialSyncJob.setValue('script', 'new DAWAAddressClient().syncAllDanishLocations(); var self = new GlideRecord("sysauto_script"); if (self.get(GlideExecutionTracker.getGlideExecutionTracker().getSysID())) { self.deleteRecord(); }');
    var initialJobSysId = initialSyncJob.insert();

    if (initialJobSysId) {
        SncTriggerSynchronizer.executeNow(initialSyncJob);
        gs.info('--> Initial sync triggered successfully.');
    } else {
        gs.error('--> FATAL: Could not trigger initial sync job.');
    }


    gs.info('### SETUP (' + SCRIPT_VERSION + '): Installation script complete. ###');


    /***********************************************************************************************
     * HELPER FUNCTIONS
     ***********************************************************************************************/

    function ensureProperty(name, value, desc) {
        var gr = new GlideRecord('sys_properties');
        if (!gr.get('name', name)) {
            gr.initialize();
            gr.name = name;
            gr.type = "string";
        }
        gr.value = value;
        gr.description = desc;
        gr.update();
    }

    function ensureField(table, element, label, internalType, maxLen) {
        var d = new GlideRecord('sys_dictionary');
        d.addQuery('name', table);
        d.addQuery('element', element);
        d.query();
        if (!d.next()) {
            d.initialize();
            d.name = table;
            d.element = element;
            d.column_label = label;
            d.internal_type = internalType;
            if (maxLen) d.max_length = String(maxLen);
            d.active = true;
            d.insert();
        }
    }

    function ensureUIComponents() {
        var policyName = 'DAWA: Country mandatory (form only)';
        var up = new GlideRecord('sys_ui_policy');
        if (!up.get('short_description', policyName)) {
            up.initialize();
            up.table = 'cmn_location';
            up.short_description = policyName;
            up.active = true;
            up.on_load = true;
            up.order = 100;
            var upId = up.insert();
            var a = new GlideRecord('sys_ui_policy_action');
            a.initialize();
            a.ui_policy = upId;
            a.field = 'country';
            a.mandatory = true;
            a.visible = true;
            a.insert();
        }
        var normalizeScript = "var res = new DAWAAddressClient().normalizeRecord(current); gs.addInfoMessage('DAWA normalize: ' + JSON.stringify(res)); if(res.changed){ current.update(); } action.setRedirectURL(current);";
        ensureUIAction('cmn_location', 'x_dawa_normalize', 'DAWA Normalize', 10, normalizeScript, "current.country == 'DK' || current.country == 'Denmark'");
        var debugScript = "var q = [current.street, current.zip, current.city].join(' '); var res = new DAWAAddressClient().resolveFromFreeText(q, current.zip); gs.addInfoMessage('DAWA resolve: ' + JSON.stringify(res.diag)); action.setRedirectURL(current);";
        ensureUIAction('cmn_location', 'x_dawa_debug', 'DAWA Debug Resolve', 11, debugScript, "true");
        var appName = 'DAWA Integration';
        var app = new GlideRecord('sys_app_application');
        if (!app.get('title', appName)) {
            app.initialize();
            app.title = appName;
            var appId = app.insert();
            var m = new GlideRecord('sys_app_module');
            m.initialize();
            m.application = appId;
            m.title = 'Locations (DAWA)';
            m.link_type = 'LIST';
            m.name = 'cmn_location';
            m.insert();
        }
    }

    function ensureUIAction(table, name, label, order, script, condition) {
        var a = new GlideRecord('sys_ui_action');
        if (!a.get('name', name)) {
            a.initialize();
            a.table = table;
            a.name = name;
            a.form_button = true;
            a.client = false;
        }
        a.label = label;
        a.order = order;
        a.script = script;
        a.condition = condition || '';
        a.update();
    }

    function getDAWAScriptIncludeCode() {
        return [
            "var DAWAAddressClient = Class.create();",
            "DAWAAddressClient.prototype = {",
            "  initialize: function () {",
            "    this.LOG_SOURCE = 'DAWAAddressClient';",
            "    this.base = gs.getProperty('x_bgb.dawa.base_url', 'https://api.dataforsyningen.dk');",
            "    var raw = gs.getProperty('x_bgb.dawa.country_allowlist', 'DK');",
            "    this.allowlist = raw.split(',').map(function (s) { return (s + '').trim().toUpperCase(); });",
            "  },",
            "  _httpGet: function (url, query) {",
            "    var rm = new sn_ws.RESTMessageV2(); rm.setEndpoint(url); rm.setHttpMethod('GET');",
            "    if (query) { Object.keys(query).forEach(function(k) { rm.setQueryParameter(k, query[k]); }); }",
            "    var resp = rm.execute(); var code = resp.getStatusCode(); var body = resp.getBody();",
            "    if (code >= 200 && code < 300) { try { return JSON.parse(body); } catch (e) { return body; } }",
            "    throw 'DAWA HTTP ' + code + ': ' + (resp.getErrorMessage() || body || 'unknown');",
            "  },",
            "  getAddressById: function (id) { if (!id) return null; return this._httpGet(this.base + '/adresser/' + encodeURIComponent(String(id)), null); },",
            "  resolveFromFreeText: function (q, zip) {",
            "    if (!q) return { obj: null, diag: { q: q, zip: zip, ac: 0, sr: 0 } };",
            "    var hits = []; try { hits = this._httpGet(this.base + '/adresser/autocomplete', { q: q, per_side: 5 }) || []; } catch (e) {} ",
            "    var id = (hits.length > 0) ? hits[0].id : null;",
            "    if (!id) {",
            "        var list = []; try { list = this._httpGet(this.base + '/adresser', { q: q, per_side: 10, postnr: zip || '' }) || []; } catch (e) {}",
            "        if (list.length > 0) id = list[0].id;",
            "    }",
            "    var obj = null; if (id) { try { obj = this.getAddressById(id); } catch (e) {} }",
            "    return { obj: obj, diag: { q: q, zip: zip, chosen: id } };",
            "  },",
            "  mapToCmnLocation: function (addrObj) {",
            "    if (!addrObj || !addrObj.id) return null; var access = addrObj.adgangsadresse || {};",
            "    var res = {",
            "      u_dawa_adresse_id: String(addrObj.id), u_dawa_adgangsadresse_id: String(access.id || ''),",
            "      street: [addrObj.vejnavn, addrObj.husnr, addrObj.etage, addrObj.dør].filter(Boolean).join(' '),",
            "      city: (addrObj.postnummer) ? addrObj.postnummer.navn : '', zip: (addrObj.postnummer) ? addrObj.postnummer.nr : '', country: 'DK',",
            "      latitude: (access.koordinater) ? access.koordinater[1] : null, longitude: (access.koordinater) ? access.koordinater[0] : null,",
            "      u_kommune_kode: (access.kommune) ? access.kommune.kode : '', u_kommune_navn: (access.kommune) ? access.kommune.navn : ''",
            "    };",
            "    return res;",
            "  },",
            "  normalizeRecord: function (cmn) {",
            "    try {",
            "      var country = ('' + cmn.getValue('country')).toUpperCase();",
            "      if (this.allowlist.indexOf(country) === -1 && country !== 'DENMARK') return { changed: false, reason: 'country_not_allowed' };",
            "      var q = [cmn.getValue('street'), cmn.getValue('zip'), cmn.getValue('city')].filter(Boolean).join(' ');",
            "      var res = this.resolveFromFreeText(q, cmn.getValue('zip'));",
            "      if (!res.obj) return { changed: false, reason: 'no_match', diag: res.diag };",
            "      var mapped = this.mapToCmnLocation(res.obj);",
            "      if (!mapped) return { changed: false, reason: 'map_failed', diag: res.diag };",
            "      var changed = 0;",
            "      Object.keys(mapped).forEach(function(f) {",
            "         var sval = (mapped[f] == null ? '' : String(mapped[f]));",
            "         if (cmn.isValidField(f) && cmn.getValue(f) != sval) { cmn.setValue(f, sval); changed++; }",
            "      });",
            "      return { changed: changed > 0, reason: changed > 0 ? 'normalized' : 'already_normalized', diag: res.diag };",
            "    } catch (e) { return { changed: false, reason: 'exception:' + e }; }",
            "  },",
            "  syncAllDanishLocations: function() {",
            "    gs.log('Starting syncAllDanishLocations', this.LOG_SOURCE);",
            "    var updated = 0, failed = 0;",
            "    var locGR = new GlideRecord('cmn_location');",
            "    locGR.addQuery('country', 'DK').addOrCondition('country', 'Denmark');",
            "    locGR.query();",
            "    while(locGR.next()) {",
            "      var res = this.normalizeRecord(locGR);",
            "      if (res.changed) {",
            "        locGR.setWorkflow(false); locGR.autoSysFields(false);",
            "        if (locGR.update()) { updated++; } else { failed++; }",
            "      }",
            "    }",
            "    gs.log('Sync complete. Updated: ' + updated + ', Failed: ' + failed, this.LOG_SOURCE);",
            "    return {updated: updated, failed: failed};",
            "  },",
            "  type: 'DAWAAddressClient'",
            "};"
        ].join('\\n');
    }

})();
