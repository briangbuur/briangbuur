// DAWA Integration Validation Script v6.1 - Fixed Boolean Checks
// Purpose: Accurate validation of DAWA integration with proper data type handling

(function validateDAWAIntegrationFixed() {
    'use strict';
    
    function log(msg) {
        gs.info('[DAWA Validation v6.1] ' + msg);
    }
    
    function error(msg) {
        gs.error('[DAWA Validation v6.1] ' + msg);
    }
    
    var results = {
        total: 0,
        passed: 0,
        failed: 0,
        warnings: 0
    };
    
    function test(description, condition, isWarning) {
        results.total++;
        if (condition) {
            results.passed++;
            log('‚úÖ ' + description);
            return true;
        } else {
            if (isWarning) {
                results.warnings++;
                log('‚ö†Ô∏è ' + description);
            } else {
                results.failed++;
                error('‚ùå ' + description);
            }
            return false;
        }
    }
    
    function isTrue(value) {
        return value === true || value === 'true' || value === '1' || value === 1;
    }
    
    try {
        log('Starting DAWA Integration Validation v6.1 (Fixed)...');
        log('===================================================');
        
        // Test 1: User Configuration
        log('\n1. USER & AUTHENTICATION');
        var userGR = new GlideRecord('sys_user');
        var userExists = userGR.get('user_name', 'dawa.integration');
        test('Integration user exists', userExists);
        if (userExists) {
            test('User is active', isTrue(userGR.getValue('active')));
            test('Web service access enabled', isTrue(userGR.getValue('web_service_access_only')));
            test('Internal integration user flag set', isTrue(userGR.getValue('internal_integration_user')));
        }
        
        // Test 2: Role Configuration
        log('\n2. ROLE & PERMISSIONS');
        var roleGR = new GlideRecord('sys_user_role');
        var roleExists = roleGR.get('name', 'x_dawa.integrator');
        test('Custom role exists', roleExists);
        
        if (userExists) {
            var roleAssignGR = new GlideRecord('sys_user_has_role');
            roleAssignGR.addQuery('user', userGR.getUniqueValue());
            roleAssignGR.query();
            var roleCount = roleAssignGR.getRowCount();
            test('User has roles assigned', roleCount > 0);
            log('   Total roles: ' + roleCount);
        }
        
        // Test 3: System Properties
        log('\n3. SYSTEM PROPERTIES');
        var propTests = [
            { name: 'x_bgb.dawa.base_url', expected: 'https://api.dataforsyningen.dk' },
            { name: 'x_bgb.dawa.country_allowlist', expected: 'DK' },
            { name: 'rest.outbound.ecc_agent.skip_domain.api.dataforsyningen.dk', expected: 'true' },
            { name: 'glide.outbound_http_enabled.api.dataforsyningen.dk', expected: 'true' },
            { name: 'glide.outbound_http_enabled', expected: 'true' }
        ];
        
        propTests.forEach(function(prop) {
            var propGR = new GlideRecord('sys_properties');
            if (propGR.get('name', prop.name)) {
                var actualValue = propGR.getValue('value');
                test('Property "' + prop.name + '" configured correctly', actualValue === prop.expected);
            } else {
                test('Property "' + prop.name + '" exists', false);
            }
        });
        
        // Test 4: Database Fields
        log('\n4. DATABASE FIELDS');
        var fieldTests = [
            { name: 'u_dawa_adresse_id', type: 'string', length: 64 },
            { name: 'u_dawa_adgangsadresse_id', type: 'string', length: 64 },
            { name: 'u_kommune_kode', type: 'string', length: 40 },
            { name: 'u_kommune_navn', type: 'string', length: 100 }
        ];
        
        fieldTests.forEach(function(field) {
            var fieldGR = new GlideRecord('sys_dictionary');
            fieldGR.addQuery('name', 'cmn_location');
            fieldGR.addQuery('element', field.name);
            fieldGR.query();
            if (fieldGR.next()) {
                test('Field "' + field.name + '" exists', true);
                test('Field "' + field.name + '" is active', isTrue(fieldGR.getValue('active')));
                test('Field "' + field.name + '" type correct', fieldGR.getValue('internal_type') === field.type);
                if (field.length) {
                    var actualLength = parseInt(fieldGR.getValue('max_length'));
                    test('Field "' + field.name + '" length = ' + field.length, actualLength === field.length);
                }
            } else {
                test('Field "' + field.name + '" exists', false);
            }
        });
        
        // Test 5: Script Include
        log('\n5. SCRIPT INCLUDE');
        var siGR = new GlideRecord('sys_script_include');
        var scriptExists = siGR.get('name', 'DAWAAddressClient');
        test('DAWAAddressClient Script Include exists', scriptExists);
        if (scriptExists) {
            test('Script Include is active', isTrue(siGR.getValue('active')));
            test('Script Include is public', siGR.getValue('access') === 'public');
            var script = siGR.getValue('script');
            test('Script includes initialize method', script.indexOf('initialize: function()') > -1);
            test('Script includes normalizeRecord method', script.indexOf('normalizeRecord: function(') > -1);
            test('Script includes resolveFromFreeText method', script.indexOf('resolveFromFreeText: function(') > -1);
            test('Script includes country field protection', script.indexOf('field !== \'country\'') > -1);
        }
        
        // Test 6: UI Actions
        log('\n6. UI ACTIONS');
        var buttonTests = [
            { name: 'dawa_validate_smart', description: 'Smart validation button' },
            { name: 'dawa_check_only', description: 'Check address button' },
            { name: 'dawa_clear_data', description: 'Clear data button' }
        ];
        
        buttonTests.forEach(function(button) {
            var actionGR = new GlideRecord('sys_ui_action');
            if (actionGR.get('name', button.name)) {
                test(button.description + ' exists', true);
                test(button.description + ' is active', isTrue(actionGR.getValue('active')));
                test(button.description + ' targets cmn_location', actionGR.getValue('table') === 'cmn_location');
                test(button.description + ' is form button', isTrue(actionGR.getValue('form_button')));
                var script = actionGR.getValue('script');
                test(button.description + ' has working script', script && script.length > 100);
            } else {
                test(button.description + ' exists', false);
            }
        });
        
        // Test 7: API Connectivity
        log('\n7. API CONNECTIVITY TEST');
        try {
            if (scriptExists) {
                var testClient = new DAWAAddressClient();
                var testResult = testClient.resolveFromFreeText('La Cours Vej 14 2000', '2000');
                test('DAWA API connectivity works', testResult && testResult.obj);
                if (testResult && testResult.obj) {
                    var addressText = testResult.obj.betegnelse || 'Address found';
                    log('   API Response: ' + addressText);
                }
            }
        } catch (e) {
            test('DAWA API connectivity works', false);
            log('   Error: ' + e.message);
        }
        
        // Test 8: End-to-End Functionality Test
        log('\n8. FUNCTIONAL TEST');
        try {
            if (scriptExists) {
                // Create a test record in memory
                var testRecord = {
                    values: {
                        street: 'La Cours Vej 14',
                        zip: '2000',
                        country: 'Denmark'
                    },
                    getValue: function(field) { return this.values[field] || ''; },
                    setValue: function(field, value) { this.values[field] = value; },
                    isValidField: function(field) { return true; }
                };
                
                var testClient = new DAWAAddressClient();
                var result = testClient.normalizeRecord(testRecord, false);
                test('End-to-end normalization works', result && result.changed !== undefined);
                if (result) {
                    test('Validation returned expected result structure', 
                        result.hasOwnProperty('changed') && result.hasOwnProperty('reason'));
                    log('   Result: ' + result.reason + (result.changed ? ' (changed)' : ' (no changes)'));
                }
            }
        } catch (e) {
            test('End-to-end normalization works', false);
            log('   Error: ' + e.message);
        }
        
        // Summary
        log('\n===================================================');
        log('DAWA INTEGRATION VALIDATION SUMMARY');
        log('===================================================');
        log('Total tests: ' + results.total);
        log('Passed: ' + results.passed + ' ‚úÖ');
        log('Failed: ' + results.failed + ' ‚ùå');
        log('Warnings: ' + results.warnings + ' ‚ö†Ô∏è');
        
        var successRate = Math.round((results.passed / results.total) * 100);
        log('Success rate: ' + successRate + '%');
        
        if (results.failed === 0) {
            log('üéâ INTEGRATION STATUS: FULLY FUNCTIONAL');
            log('\nREADY FOR PRODUCTION USE!');
        } else if (results.failed <= 3) {
            log('‚úÖ INTEGRATION STATUS: FUNCTIONAL - Minor configuration issues');
            log('\nCore functionality is working, minor fixes may be needed.');
        } else {
            log('‚ö†Ô∏è INTEGRATION STATUS: NEEDS ATTENTION - Multiple issues found');
        }
        
        // Next Steps
        log('\nNEXT STEPS:');
        if (results.failed === 0) {
            log('1. Navigate to a Location record (cmn_location)');
            log('2. Enter test data: Street="La Cours Vej 14", Zip="2000", Country="Denmark"');
            log('3. Click "dawa_validate_smart" button');
            log('4. Verify address validation populates fields correctly');
        } else {
            log('1. Review any failed tests above');
            log('2. Most failures appear to be minor configuration issues');
            log('3. Test manually to verify functionality works despite validation failures');
        }
        
    } catch (e) {
        error('Validation script failed: ' + e.message);
    }
    
})();
