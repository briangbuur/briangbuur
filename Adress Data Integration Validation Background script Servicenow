/*********************************************************************************************
 * DAWA Integration Installation v5.0 - Clean PDI Install
 * Purpose: Complete fresh installation of DAWA Danish Address Web API integration
 * Author: Brian Gadeberg Buur (Concept) & Claude Sonnet 4 (Implementation)
 * 
 * Features:
 * - User-friendly button names that display correctly
 * - Main address vs full address options
 * - Working field mapping with proper Danish format
 * - Complete DAWA API integration
 *********************************************************************************************/

(function installDAWAIntegrationV50() {
    'use strict';

    var CONFIG = {
        user: {
            name: 'dawa.integration',
            firstName: 'Integration',
            lastName: 'DAWA API',
            roles: ['rest_service', 'x_dawa.integrator']
        },
        role: {
            name: 'x_dawa.integrator',
            description: 'DAWA integration access to cmn_location'
        },
        properties: [
            { name: 'x_bgb.dawa.base_url', value: 'https://api.dataforsyningen.dk', description: 'DAWA API base URL' },
            { name: 'x_bgb.dawa.country_allowlist', value: 'DK', description: 'Country codes for DAWA processing' }
        ],
        httpProperties: [
            { name: 'rest.outbound.ecc_agent.skip_domain.api.dataforsyningen.dk', value: 'true', description: 'Allow DAWA API access' },
            { name: 'glide.outbound_http_enabled.api.dataforsyningen.dk', value: 'true', description: 'Enable HTTP for DAWA' },
            { name: 'glide.outbound_http_enabled', value: 'true', description: 'Enable outbound HTTP' }
        ],
        fields: [
            { name: 'u_dawa_adresse_id', label: 'DAWA Adresse ID', type: 'string', length: 64 },
            { name: 'u_dawa_adgangsadresse_id', label: 'DAWA Adgangsadresse ID', type: 'string', length: 64 },
            { name: 'u_kommune_kode', label: 'Kommune kode', type: 'string', length: 40 },
            { name: 'u_kommune_navn', label: 'Kommune navn', type: 'string', length: 100 }
        ]
    };

    function log(msg) {
        gs.info('[DAWA v5.0] ' + msg);
    }

    function createUser() {
        var userGR = new GlideRecord('sys_user');
        if (!userGR.get('user_name', CONFIG.user.name)) {
            userGR.initialize();
            userGR.setValue('user_name', CONFIG.user.name);
            userGR.setValue('first_name', CONFIG.user.firstName);
            userGR.setValue('last_name', CONFIG.user.lastName);
            userGR.setValue('web_service_access_only', true);
            userGR.setValue('internal_integration_user', true);
            userGR.setValue('active', true);
            userGR.setUserPassword(new GlideSecureRandomUtil().getSecureRandomString(20));
            var userSysId = userGR.insert();
            log('Created user: ' + CONFIG.user.name);
            return userSysId;
        } else {
            userGR.setValue('active', true);
            userGR.update();
            log('Updated existing user');
            return userGR.getUniqueValue();
        }
    }

    function createRole() {
        var roleGR = new GlideRecord('sys_user_role');
        if (!roleGR.get('name', CONFIG.role.name)) {
            roleGR.initialize();
            roleGR.setValue('name', CONFIG.role.name);
            roleGR.setValue('description', CONFIG.role.description);
            var roleSysId = roleGR.insert();
            log('Created role: ' + CONFIG.role.name);
            return roleSysId;
        } else {
            return roleGR.getUniqueValue();
        }
    }

    function assignRoles(userSysId) {
        CONFIG.user.roles.forEach(function(roleName) {
            var role = new GlideRecord('sys_user_role');
            if (role.get('name', roleName)) {
                var existingAssignment = new GlideRecord('sys_user_has_role');
                existingAssignment.addQuery('user', userSysId);
                existingAssignment.addQuery('role', role.getUniqueValue());
                existingAssignment.query();
                
                if (!existingAssignment.hasNext()) {
                    var roleMapGR = new GlideRecord('sys_user_has_role');
                    roleMapGR.initialize();
                    roleMapGR.setValue('user', userSysId);
                    roleMapGR.setValue('role', role.getUniqueValue());
                    roleMapGR.insert();
                }
            }
        });
        log('Assigned roles to user');
    }

    function createProperties() {
        var allProps = CONFIG.properties.concat(CONFIG.httpProperties);
        allProps.forEach(function(prop) {
            var propGR = new GlideRecord('sys_properties');
            if (!propGR.get('name', prop.name)) {
                propGR.initialize();
                propGR.setValue('name', prop.name);
                propGR.setValue('type', 'string');
            }
            propGR.setValue('value', prop.value);
            propGR.setValue('description', prop.description);
            propGR.update();
        });
        log('Created system properties');
    }

    function createFields() {
        CONFIG.fields.forEach(function(field) {
            var fieldGR = new GlideRecord('sys_dictionary');
            fieldGR.addQuery('name', 'cmn_location');
            fieldGR.addQuery('element', field.name);
            fieldGR.query();
            
            if (!fieldGR.hasNext()) {
                fieldGR.initialize();
                fieldGR.setValue('name', 'cmn_location');
                fieldGR.setValue('element', field.name);
                fieldGR.setValue('column_label', field.label);
                fieldGR.setValue('internal_type', field.type);
                if (field.length) {
                    fieldGR.setValue('max_length', String(field.length));
                }
                fieldGR.setValue('active', true);
                fieldGR.insert();
            } else {
                fieldGR.next();
                fieldGR.setValue('active', true);
                fieldGR.update();
            }
        });
        log('Created custom fields');
    }

    function createScriptInclude() {
        var siGR = new GlideRecord('sys_script_include');
        siGR.initialize();
        siGR.setValue('name', 'DAWAAddressClient');
        siGR.setValue('active', true);
        siGR.setValue('access', 'public');
        siGR.setValue('description', 'DAWA Address integration client');
        
        var scriptCode = "var DAWAAddressClient = Class.create();\n" +
        "DAWAAddressClient.prototype = {\n" +
        "    initialize: function() {\n" +
        "        this.base = gs.getProperty('x_bgb.dawa.base_url', 'https://api.dataforsyningen.dk');\n" +
        "        this.allowlist = gs.getProperty('x_bgb.dawa.country_allowlist', 'DK').split(',');\n" +
        "        this.timeout = 30000;\n" +
        "    },\n" +
        "    _httpGet: function(url, query) {\n" +
        "        var rm = new sn_ws.RESTMessageV2();\n" +
        "        rm.setEndpoint(url);\n" +
        "        rm.setHttpMethod('GET');\n" +
        "        rm.setHttpTimeout(this.timeout);\n" +
        "        if (query) {\n" +
        "            for (var k in query) {\n" +
        "                if (query[k]) rm.setQueryParameter(k, String(query[k]));\n" +
        "            }\n" +
        "        }\n" +
        "        var resp = rm.execute();\n" +
        "        var code = resp.getStatusCode();\n" +
        "        if (code >= 200 && code < 300) {\n" +
        "            try { return JSON.parse(resp.getBody()); }\n" +
        "            catch (e) { return null; }\n" +
        "        }\n" +
        "        return null;\n" +
        "    },\n" +
        "    resolveFromFreeText: function(q, zip) {\n" +
        "        if (!q || q.trim() === '') return { obj: null, diag: { found: false } };\n" +
        "        try {\n" +
        "            var params = { q: q.trim(), per_side: 5 };\n" +
        "            if (zip) params.postnr = zip;\n" +
        "            var hits = this._httpGet(this.base + '/adresser/autocomplete', params);\n" +
        "            if (hits && hits.length > 0) {\n" +
        "                var addressId = hits[0].adresse ? hits[0].adresse.id : null;\n" +
        "                if (addressId) {\n" +
        "                    var addressObj = this._httpGet(this.base + '/adresser/' + addressId, null);\n" +
        "                    if (addressObj) {\n" +
        "                        return { obj: addressObj, diag: { found: true, candidates: hits.length } };\n" +
        "                    }\n" +
        "                }\n" +
        "            }\n" +
        "        } catch (e) {}\n" +
        "        return { obj: null, diag: { found: false } };\n" +
        "    },\n" +
        "    mapToCmnLocation: function(addrObj, includeApartment) {\n" +
        "        if (!addrObj || !addrObj.id) return null;\n" +
        "        var access = addrObj.adgangsadresse || {};\n" +
        "        var vejstykke = access.vejstykke || {};\n" +
        "        var postnummer = access.postnummer || {};\n" +
        "        var kommune = access.kommune || {};\n" +
        "        var koordinater = access.koordinater || [];\n" +
        "        var vejnavn = vejstykke.navn || access.vejnavn || '';\n" +
        "        var husnr = access.husnr || '';\n" +
        "        var fullStreet = '';\n" +
        "        if (vejnavn && husnr) {\n" +
        "            fullStreet = vejnavn + ' ' + husnr;\n" +
        "            if (includeApartment) {\n" +
        "                var apartmentParts = [];\n" +
        "                if (addrObj.etage) {\n" +
        "                    apartmentParts.push(addrObj.etage === '0' || addrObj.etage === 'st' ? 'st' : addrObj.etage + '.');\n" +
        "                }\n" +
        "                if (addrObj.dor) apartmentParts.push(addrObj.dor);\n" +
        "                if (apartmentParts.length > 0) fullStreet += ', ' + apartmentParts.join('');\n" +
        "            }\n" +
        "        }\n" +
        "        return {\n" +
        "            u_dawa_adresse_id: String(addrObj.id),\n" +
        "            u_dawa_adgangsadresse_id: String(access.id || ''),\n" +
        "            street: fullStreet,\n" +
        "            city: postnummer.navn || '',\n" +
        "            zip: postnummer.nr || '',\n" +
        "            country: 'DK',\n" +
        "            latitude: koordinater.length > 1 ? koordinater[1] : null,\n" +
        "            longitude: koordinater.length > 0 ? koordinater[0] : null,\n" +
        "            u_kommune_kode: kommune.kode || '',\n" +
        "            u_kommune_navn: kommune.navn || ''\n" +
        "        };\n" +
        "    },\n" +
        "    normalizeRecord: function(cmn, includeApartment) {\n" +
        "        try {\n" +
        "            var country = (cmn.getValue('country') + '').toUpperCase();\n" +
        "            if (this.allowlist.indexOf(country) === -1 && country !== 'DENMARK') {\n" +
        "                return { changed: false, reason: 'country_not_allowed' };\n" +
        "            }\n" +
        "            var queryParts = [];\n" +
        "            var street = cmn.getValue('street');\n" +
        "            var zip = cmn.getValue('zip');\n" +
        "            var city = cmn.getValue('city');\n" +
        "            if (street && street.trim()) queryParts.push(street.trim());\n" +
        "            if (zip && zip.trim()) queryParts.push(zip.trim());\n" +
        "            if (city && city.trim()) queryParts.push(city.trim());\n" +
        "            if (queryParts.length === 0) {\n" +
        "                return { changed: false, reason: 'insufficient_data' };\n" +
        "            }\n" +
        "            var query = queryParts.join(' ');\n" +
        "            var result = this.resolveFromFreeText(query, zip);\n" +
        "            if (!result || !result.obj) {\n" +
        "                return { changed: false, reason: 'no_match' };\n" +
        "            }\n" +
        "            var mapped = this.mapToCmnLocation(result.obj, includeApartment);\n" +
        "            if (!mapped) return { changed: false, reason: 'mapping_failed' };\n" +
        "            var changes = 0;\n" +
        "            for (var field in mapped) {\n" +
        "                if (mapped.hasOwnProperty(field)) {\n" +
        "                    var newValue = mapped[field] == null ? '' : String(mapped[field]);\n" +
        "                    if (cmn.isValidField(field)) {\n" +
        "                        var currentValue = cmn.getValue(field) || '';\n" +
        "                        if (currentValue != newValue) {\n" +
        "                            cmn.setValue(field, newValue);\n" +
        "                            changes++;\n" +
        "                        }\n" +
        "                    }\n" +
        "                }\n" +
        "            }\n" +
        "            return {\n" +
        "                changed: changes > 0,\n" +
        "                reason: changes > 0 ? 'normalized' : 'already_normalized',\n" +
        "                changes: changes\n" +
        "            };\n" +
        "        } catch (e) {\n" +
        "            return { changed: false, reason: 'exception', error: e.message };\n" +
        "        }\n" +
        "    },\n" +
        "    type: 'DAWAAddressClient'\n" +
        "};";
        
        siGR.setValue('script', scriptCode);
        siGR.insert();
        log('Created DAWAAddressClient Script Include');
    }

    function createUIActions() {
        // Main address button
        var mainAction = new GlideRecord('sys_ui_action');
        mainAction.initialize();
        mainAction.setValue('table', 'cmn_location');
        mainAction.setValue('name', 'validate_main_address');
        mainAction.setValue('label', 'Validate Main Address');
        mainAction.setValue('form_button', true);
        mainAction.setValue('client', false);
        mainAction.setValue('order', 100);
        mainAction.setValue('active', true);
        mainAction.setValue('condition', "current.country == 'DK' || current.country == 'Denmark'");
        mainAction.setValue('script', 
            "try { " +
                "var result = new DAWAAddressClient().normalizeRecord(current, false); " +
                "if (result && result.changed) { " +
                    "current.update(); " +
                    "gs.addInfoMessage('Main address validated and updated.'); " +
                "} else if (result && result.reason === 'no_match') { " +
                    "gs.addInfoMessage('Address not found in Danish postal registry.'); " +
                "} else { " +
                    "gs.addInfoMessage('Address validation completed.'); " +
                "} " +
            "} catch (e) { " +
                "gs.addErrorMessage('Unable to validate address.'); " +
            "} " +
            "action.setRedirectURL(current);"
        );
        mainAction.insert();
        
        // Full address button
        var fullAction = new GlideRecord('sys_ui_action');
        fullAction.initialize();
        fullAction.setValue('table', 'cmn_location');
        fullAction.setValue('name', 'validate_full_address');
        fullAction.setValue('label', 'Validate Full Address');
        fullAction.setValue('form_button', true);
        fullAction.setValue('client', false);
        fullAction.setValue('order', 101);
        fullAction.setValue('active', true);
        fullAction.setValue('condition', "current.country == 'DK' || current.country == 'Denmark'");
        fullAction.setValue('script', 
            "try { " +
                "var result = new DAWAAddressClient().normalizeRecord(current, true); " +
                "if (result && result.changed) { " +
                    "current.update(); " +
                    "gs.addInfoMessage('Full address validated with apartment details.'); " +
                "} else if (result && result.reason === 'no_match') { " +
                    "gs.addInfoMessage('Address not found in Danish postal registry.'); " +
                "} else { " +
                    "gs.addInfoMessage('Address validation completed.'); " +
                "} " +
            "} catch (e) { " +
                "gs.addErrorMessage('Unable to validate address.'); " +
            "} " +
            "action.setRedirectURL(current);"
        );
        fullAction.insert();
        
        // Check address button
        var checkAction = new GlideRecord('sys_ui_action');
        checkAction.initialize();
        checkAction.setValue('table', 'cmn_location');
        checkAction.setValue('name', 'check_danish_address');
        checkAction.setValue('label', 'Check Address');
        checkAction.setValue('form_button', true);
        checkAction.setValue('client', false);
        checkAction.setValue('order', 102);
        checkAction.setValue('active', true);
        checkAction.setValue('condition', "true");
        checkAction.setValue('script', 
            "try { " +
                "var queryParts = []; " +
                "if (current.street && current.street.trim()) queryParts.push(current.street.trim()); " +
                "if (current.zip && current.zip.trim()) queryParts.push(current.zip.trim()); " +
                "if (current.city && current.city.trim()) queryParts.push(current.city.trim()); " +
                "if (queryParts.length === 0) { " +
                    "gs.addInfoMessage('Please enter address information to check.'); " +
                "} else { " +
                    "var query = queryParts.join(' '); " +
                    "var result = new DAWAAddressClient().resolveFromFreeText(query, current.zip); " +
                    "if (result && result.obj) { " +
                        "gs.addInfoMessage('Address found in Danish postal registry.'); " +
                    "} else { " +
                        "gs.addInfoMessage('Address not found in Danish postal registry.'); " +
                    "} " +
                "} " +
            "} catch (e) { " +
                "gs.addErrorMessage('Unable to check address.'); " +
            "} " +
            "action.setRedirectURL(current);"
        );
        checkAction.insert();
        
        log('Created UI Actions with user-friendly labels');
    }

    // Main execution
    try {
        log('Starting DAWA Integration Installation v5.0 (Clean PDI)');
        
        if (!gs.hasRole('admin')) {
            gs.error('[DAWA v5.0] Admin role required');
            return;
        }

        var userSysId = createUser();
        createRole();
        assignRoles(userSysId);
        createProperties();
        createFields();
        createScriptInclude();
        createUIActions();
        
        gs.flushCache();
        
        log('');
        log('DAWA Integration v5.0 Installation Complete!');
        log('==========================================');
        log('Available buttons:');
        log('- "Validate Main Address" (street + number only)');
        log('- "Validate Full Address" (includes apartment details)');
        log('- "Check Address" (verify address exists)');
        log('');
        log('Test with: La Cours Vej 14, 2000, Denmark');
        
    } catch (e) {
        gs.error('[DAWA v5.0] Installation failed: ' + e.message);
    }

})();
