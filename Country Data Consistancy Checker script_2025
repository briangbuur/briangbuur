// Comprehensive Country Data Consistency Checker
// This script validates and corrects country choice list data
// Execute in: System Definition > Scripts - Background

try {
    gs.info('=== Starting Country Data Consistency Check ===');
    
    var results = {
        apiCountries: 0,
        dbCountries: 0,
        updated: 0,
        added: 0,
        flaggedForRemoval: 0,
        duplicates: 0,
        inconsistencies: [],
        warnings: [],
        errors: []
    };
    
    // Step 1: Fetch fresh data from API
    gs.info('STEP 1: Fetching current data from REST Countries API...');
    
    var apiCountries = {};
    try {
        var request = new sn_ws.RESTMessageV2();
        request.setEndpoint('https://restcountries.com/v3.1/all?fields=name,cca2,cca3,region,capital');
        request.setHttpMethod('GET');
        request.setRequestTimeout(30000);
        request.setRequestHeader('Accept', 'application/json');
        
        var response = request.execute();
        if (response.getStatusCode() == 200) {
            var apiData = JSON.parse(response.getBody());
            for (var i = 0; i < apiData.length; i++) {
                var country = apiData[i];
                if (country.name && country.name.common && country.cca2) {
                    var cleanName = country.name.common.replace(/[^\w\s\-\(\)\.]/g, '');
                    apiCountries[country.cca2] = {
                        code: country.cca2,
                        name: cleanName,
                        officialName: country.name.official || cleanName,
                        code3: country.cca3 || '',
                        region: country.region || '',
                        capital: Array.isArray(country.capital) ? country.capital[0] : (country.capital || '')
                    };
                }
            }
            results.apiCountries = Object.keys(apiCountries).length;
            gs.info('‚úì Fetched ' + results.apiCountries + ' countries from API');
        } else {
            throw new Error('API returned status: ' + response.getStatusCode());
        }
    } catch (error) {
        results.errors.push('API fetch failed: ' + error.message);
        gs.error('‚úó API fetch failed: ' + error.message);
        gs.info('Continuing with database-only consistency check...');
    }
    
    // Step 2: Get current database countries
    gs.info('STEP 2: Analyzing current database countries...');
    
    var dbCountries = {};
    var duplicateNames = {};
    var duplicateCodes = {};
    
    var choiceGR = new GlideRecord('sys_choice');
    choiceGR.addQuery('name', 'cmn_location');
    choiceGR.addQuery('element', 'country');
    choiceGR.query();
    
    while (choiceGR.next()) {
        var code = choiceGR.getValue('value');
        var name = choiceGR.getValue('label');
        var sysId = choiceGR.getValue('sys_id');
        var sequence = choiceGR.getValue('sequence');
        
        results.dbCountries++;
        
        // Track duplicates
        if (duplicateCodes[code]) {
            duplicateCodes[code].push({sysId: sysId, name: name});
            results.duplicates++;
        } else {
            duplicateCodes[code] = [{sysId: sysId, name: name}];
        }
        
        if (duplicateNames[name]) {
            duplicateNames[name].push({sysId: sysId, code: code});
        } else {
            duplicateNames[name] = [{sysId: sysId, code: code}];
        }
        
        dbCountries[code] = {
            sysId: sysId,
            code: code,
            name: name,
            sequence: sequence
        };
    }
    
    gs.info('‚úì Found ' + results.dbCountries + ' countries in database');
    
    // Step 3: Identify inconsistencies
    gs.info('STEP 3: Identifying data inconsistencies...');
    
    // Check for duplicate codes
    for (var dupCode in duplicateCodes) {
        if (duplicateCodes[dupCode].length > 1) {
            results.inconsistencies.push('Duplicate code "' + dupCode + '": ' + 
                duplicateCodes[dupCode].map(function(item) { return item.name; }).join(', '));
        }
    }
    
    // Check for duplicate names
    for (var dupName in duplicateNames) {
        if (duplicateNames[dupName].length > 1) {
            results.inconsistencies.push('Duplicate name "' + dupName + '": ' + 
                duplicateNames[dupName].map(function(item) { return item.code; }).join(', '));
        }
    }
    
    // Step 4: Compare with API data (if available)
    if (results.apiCountries > 0) {
        gs.info('STEP 4: Comparing database with API data...');
        
        // Check for countries in API but not in DB
        for (var apiCode in apiCountries) {
            if (!dbCountries[apiCode]) {
                results.inconsistencies.push('Missing from DB: ' + apiCode + ' (' + apiCountries[apiCode].name + ')');
            }
        }
        
        // Check for countries in DB but not in API
        for (var dbCode in dbCountries) {
            if (!apiCountries[dbCode]) {
                // Check if it looks like a valid country code
                if (dbCode && dbCode.length === 2 && /^[A-Z]{2}$/.test(dbCode)) {
                    results.warnings.push('In DB but not in API: ' + dbCode + ' (' + dbCountries[dbCode].name + ') - may be obsolete');
                    results.flaggedForRemoval++;
                } else {
                    results.inconsistencies.push('Invalid country code format: "' + dbCode + '" (' + dbCountries[dbCode].name + ')');
                }
            } else {
                // Check if name matches
                var apiName = apiCountries[dbCode].name;
                var dbName = dbCountries[dbCode].name;
                if (apiName !== dbName) {
                    results.inconsistencies.push('Name mismatch for ' + dbCode + ': DB="' + dbName + '" vs API="' + apiName + '"');
                }
            }
        }
    }
    
    // Step 5: Check data quality issues
    gs.info('STEP 5: Checking data quality...');
    
    for (var checkCode in dbCountries) {
        var country = dbCountries[checkCode];
        
        // Check for empty or invalid codes
        if (!country.code || country.code.trim() === '') {
            results.inconsistencies.push('Empty country code for: ' + country.name);
        }
        
        // Check for empty names
        if (!country.name || country.name.trim() === '') {
            results.inconsistencies.push('Empty country name for code: ' + country.code);
        }
        
        // Check for missing sequence
        if (!country.sequence) {
            results.warnings.push('Missing sequence for: ' + country.code + ' (' + country.name + ')');
        }
        
        // Check for unusual characters
        if (country.name && /[^\w\s\-\(\)\.']/.test(country.name)) {
            results.warnings.push('Unusual characters in name: ' + country.code + ' (' + country.name + ')');
        }
    }
    
    // Step 6: Auto-fix options (if requested)
    gs.info('STEP 6: Generating fix recommendations...');
    
    var fixRecommendations = [];
    
    if (results.apiCountries > 0) {
        // Recommend updates for name mismatches
        for (var fixCode in dbCountries) {
            if (apiCountries[fixCode] && apiCountries[fixCode].name !== dbCountries[fixCode].name) {
                fixRecommendations.push({
                    action: 'UPDATE_NAME',
                    code: fixCode,
                    currentName: dbCountries[fixCode].name,
                    recommendedName: apiCountries[fixCode].name,
                    sysId: dbCountries[fixCode].sysId
                });
            }
        }
        
        // Recommend additions for missing countries
        for (var addCode in apiCountries) {
            if (!dbCountries[addCode]) {
                fixRecommendations.push({
                    action: 'ADD_COUNTRY',
                    code: addCode,
                    name: apiCountries[addCode].name,
                    region: apiCountries[addCode].region
                });
            }
        }
    }
    
    // Step 7: Report results
    gs.info('===============================================');
    gs.info('COUNTRY DATA CONSISTENCY REPORT');
    gs.info('===============================================');
    
    gs.info('üìä STATISTICS:');
    gs.info('   API Countries: ' + results.apiCountries);
    gs.info('   DB Countries: ' + results.dbCountries);
    gs.info('   Duplicates: ' + results.duplicates);
    gs.info('   Inconsistencies: ' + results.inconsistencies.length);
    gs.info('   Warnings: ' + results.warnings.length);
    gs.info('   Flagged for removal: ' + results.flaggedForRemoval);
    gs.info('   Fix recommendations: ' + fixRecommendations.length);
    
    if (results.inconsistencies.length > 0) {
        gs.info('');
        gs.info('‚ùå CRITICAL INCONSISTENCIES:');
        for (var inc = 0; inc < Math.min(10, results.inconsistencies.length); inc++) {
            gs.error('   ' + (inc + 1) + '. ' + results.inconsistencies[inc]);
        }
        if (results.inconsistencies.length > 10) {
            gs.info('   ... and ' + (results.inconsistencies.length - 10) + ' more');
        }
    }
    
    if (results.warnings.length > 0) {
        gs.info('');
        gs.info('‚ö†Ô∏è  WARNINGS:');
        for (var warn = 0; warn < Math.min(5, results.warnings.length); warn++) {
            gs.warn('   ' + (warn + 1) + '. ' + results.warnings[warn]);
        }
        if (results.warnings.length > 5) {
            gs.info('   ... and ' + (results.warnings.length - 5) + ' more');
        }
    }
    
    if (fixRecommendations.length > 0) {
        gs.info('');
        gs.info('üîß FIX RECOMMENDATIONS:');
        for (var fix = 0; fix < Math.min(5, fixRecommendations.length); fix++) {
            var rec = fixRecommendations[fix];
            if (rec.action === 'UPDATE_NAME') {
                gs.info('   Update ' + rec.code + ': "' + rec.currentName + '" ‚Üí "' + rec.recommendedName + '"');
            } else if (rec.action === 'ADD_COUNTRY') {
                gs.info('   Add missing: ' + rec.code + ' (' + rec.name + ')');
            }
        }
        if (fixRecommendations.length > 5) {
            gs.info('   ... and ' + (fixRecommendations.length - 5) + ' more recommendations');
        }
    }
    
    // Step 8: Overall assessment
    gs.info('');
    gs.info('üéØ OVERALL ASSESSMENT:');
    
    if (results.inconsistencies.length === 0 && results.warnings.length <= 5 && results.duplicates === 0) {
        gs.info('‚úÖ EXCELLENT: Country data is highly consistent and ready for production');
    } else if (results.inconsistencies.length <= 5 && results.duplicates === 0) {
        gs.info('‚úÖ GOOD: Minor issues detected, but data is usable');
    } else if (results.inconsistencies.length <= 10) {
        gs.info('‚ö†Ô∏è  MODERATE: Several issues detected, recommend running fixes');
    } else {
        gs.info('‚ùå POOR: Significant inconsistencies detected, immediate attention required');
    }
    
    gs.info('');
    gs.info('üìã NEXT STEPS:');
    if (results.inconsistencies.length > 0) {
        gs.info('   1. Review critical inconsistencies above');
        gs.info('   2. Run data fixes for duplicates and invalid entries');
        gs.info('   3. Re-sync with API to update country names');
    }
    if (results.apiCountries > 0 && fixRecommendations.length > 0) {
        gs.info('   4. Apply recommended updates from API');
        gs.info('   5. Add missing countries if needed');
    }
    gs.info('   6. Re-run this consistency check to verify improvements');
    
    gs.info('===============================================');
    
    // Store results for potential automated fixes
    gs.setProperty('country.consistency.last_check', gs.nowDateTime());
    gs.setProperty('country.consistency.issues_count', results.inconsistencies.length);
    gs.setProperty('country.consistency.recommendations_count', fixRecommendations.length);
    
} catch (error) {
    gs.error('===============================================');
    gs.error('CRITICAL ERROR IN CONSISTENCY CHECK');
    gs.error('===============================================');
    gs.error('Error: ' + error.message);
    gs.error('Stack: ' + error.toString());
}
