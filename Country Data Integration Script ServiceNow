// =============================================
// COMPLETE PDI COUNTRY INTEGRATION DEPLOYMENT
// =============================================
// This script creates a complete country integration for any ServiceNow PDI
// Execute in: System Definition > Scripts - Background
//
// What this creates:
// 1. CountryIntegration Script Include with API logic
// 2. Populates ~250 countries in cmn_location choice list  
// 3. Creates optional scheduled job for updates
// 4. Includes verification and error handling
//
// API Source: REST Countries API (restcountries.com)
// Security: HTTPS encrypted, no API keys, 99.9% uptime
// =============================================

try {
    gs.info('===============================================');
    gs.info('STARTING COMPLETE COUNTRY INTEGRATION SETUP');
    gs.info('===============================================');
    
    var results = {
        scriptInclude: false,
        countries: 0,
        scheduledJob: false,
        errors: [],
        startTime: new Date()
    };
    
    // ==========================================
    // STEP 1: CREATE SCRIPT INCLUDE
    // ==========================================
    gs.info('STEP 1: Creating CountryIntegration Script Include...');
    
    try {
        var scriptIncludeGR = new GlideRecord('sys_script_include');
        scriptIncludeGR.addQuery('name', 'CountryIntegration');
        scriptIncludeGR.query();
        
        var exists = scriptIncludeGR.next();
        if (!exists) {
            scriptIncludeGR = new GlideRecord('sys_script_include');
            scriptIncludeGR.initialize();
        }
        
        // Complete Script Include code
        var scriptCode = 
            'var CountryIntegration = Class.create();\n' +
            'CountryIntegration.prototype = {\n' +
            '    initialize: function() {\n' +
            '        this.apiUrl = "https://restcountries.com/v3.1/all?fields=name,cca2,cca3,region,subregion,capital";\n' +
            '        this.tableName = "cmn_location";\n' +
            '        this.maxRetries = 3;\n' +
            '        this.timeout = 30000;\n' +
            '    },\n\n' +
            '    // Main sync function\n' +
            '    syncCountries: function() {\n' +
            '        try {\n' +
            '            gs.info("CountryIntegration: Starting sync");\n' +
            '            var countries = this.fetchCountries();\n' +
            '            if (!countries || countries.length === 0) {\n' +
            '                return {success: false, message: "No country data received"};\n' +
            '            }\n' +
            '            var result = this.updateChoiceList(countries);\n' +
            '            gs.info("CountryIntegration: Completed - " + result.message);\n' +
            '            return result;\n' +
            '        } catch (error) {\n' +
            '            gs.error("CountryIntegration: Error - " + error.message);\n' +
            '            return {success: false, message: error.message};\n' +
            '        }\n' +
            '    },\n\n' +
            '    // Fetch countries from API\n' +
            '    fetchCountries: function() {\n' +
            '        for (var attempt = 1; attempt <= this.maxRetries; attempt++) {\n' +
            '            try {\n' +
            '                var request = new sn_ws.RESTMessageV2();\n' +
            '                request.setEndpoint(this.apiUrl);\n' +
            '                request.setHttpMethod("GET");\n' +
            '                request.setRequestTimeout(this.timeout);\n' +
            '                request.setRequestHeader("Accept", "application/json");\n' +
            '                request.setRequestHeader("User-Agent", "ServiceNow-CountryIntegration/1.0");\n' +
            '                \n' +
            '                var response = request.execute();\n' +
            '                if (response.getStatusCode() == 200) {\n' +
            '                    return this.parseResponse(response.getBody());\n' +
            '                }\n' +
            '                gs.warn("API attempt " + attempt + " failed: " + response.getStatusCode());\n' +
            '            } catch (error) {\n' +
            '                gs.warn("API attempt " + attempt + " error: " + error.message);\n' +
            '            }\n' +
            '            if (attempt < this.maxRetries) gs.sleep(5000);\n' +
            '        }\n' +
            '        return null;\n' +
            '    },\n\n' +
            '    // Parse API response\n' +
            '    parseResponse: function(responseBody) {\n' +
            '        try {\n' +
            '            var data = JSON.parse(responseBody);\n' +
            '            var countries = [];\n' +
            '            for (var i = 0; i < data.length; i++) {\n' +
            '                var country = data[i];\n' +
            '                if (country.name && country.name.common && country.cca2) {\n' +
            '                    countries.push({\n' +
            '                        name: country.name.common.replace(/[^\\w\\s\\-\\(\\)\\.]/g, ""),\n' +
            '                        code: country.cca2,\n' +
            '                        code3: country.cca3 || "",\n' +
            '                        region: country.region || "",\n' +
            '                        capital: Array.isArray(country.capital) ? country.capital[0] : (country.capital || "")\n' +
            '                    });\n' +
            '                }\n' +
            '            }\n' +
            '            countries.sort(function(a, b) { return a.name.localeCompare(b.name); });\n' +
            '            return countries;\n' +
            '        } catch (error) {\n' +
            '            gs.error("Parse error: " + error.message);\n' +
            '            return null;\n' +
            '        }\n' +
            '    },\n\n' +
            '    // Update choice list\n' +
            '    updateChoiceList: function(countries) {\n' +
            '        var result = {success: true, added: 0, updated: 0, skipped: 0, errors: 0, total: countries.length};\n' +
            '        \n' +
            '        // Get existing choices\n' +
            '        var existing = {};\n' +
            '        var choiceGR = new GlideRecord("sys_choice");\n' +
            '        choiceGR.addQuery("name", this.tableName);\n' +
            '        choiceGR.addQuery("element", "country");\n' +
            '        choiceGR.query();\n' +
            '        while (choiceGR.next()) {\n' +
            '            existing[choiceGR.getValue("value")] = {\n' +
            '                label: choiceGR.getValue("label"),\n' +
            '                sys_id: choiceGR.getValue("sys_id")\n' +
            '            };\n' +
            '        }\n' +
            '        \n' +
            '        // Process countries\n' +
            '        for (var i = 0; i < countries.length; i++) {\n' +
            '            try {\n' +
            '                var country = countries[i];\n' +
            '                if (existing[country.code]) {\n' +
            '                    if (existing[country.code].label != country.name) {\n' +
            '                        var updateGR = new GlideRecord("sys_choice");\n' +
            '                        if (updateGR.get(existing[country.code].sys_id)) {\n' +
            '                            updateGR.setValue("label", country.name);\n' +
            '                            updateGR.update();\n' +
            '                            result.updated++;\n' +
            '                        }\n' +
            '                    } else {\n' +
            '                        result.skipped++;\n' +
            '                    }\n' +
            '                } else {\n' +
            '                    var newChoice = new GlideRecord("sys_choice");\n' +
            '                    newChoice.initialize();\n' +
            '                    newChoice.setValue("name", this.tableName);\n' +
            '                    newChoice.setValue("element", "country");\n' +
            '                    newChoice.setValue("value", country.code);\n' +
            '                    newChoice.setValue("label", country.name);\n' +
            '                    newChoice.setValue("sequence", (i + 1) * 10);\n' +
            '                    if (newChoice.insert()) {\n' +
            '                        result.added++;\n' +
            '                    } else {\n' +
            '                        result.errors++;\n' +
            '                    }\n' +
            '                }\n' +
            '            } catch (error) {\n' +
            '                result.errors++;\n' +
            '                gs.error("Error processing country: " + error.message);\n' +
            '            }\n' +
            '        }\n' +
            '        \n' +
            '        result.message = "Added: " + result.added + ", Updated: " + result.updated + ", Skipped: " + result.skipped + ", Errors: " + result.errors;\n' +
            '        return result;\n' +
            '    },\n\n' +
            '    // Test connection\n' +
            '    testConnection: function() {\n' +
            '        try {\n' +
            '            var request = new sn_ws.RESTMessageV2();\n' +
            '            request.setEndpoint("https://restcountries.com/v3.1/alpha?codes=DK,US,GB");\n' +
            '            request.setHttpMethod("GET");\n' +
            '            request.setRequestTimeout(10000);\n' +
            '            var response = request.execute();\n' +
            '            if (response.getStatusCode() == 200) {\n' +
            '                return {success: true, message: "API connection successful"};\n' +
            '            } else {\n' +
            '                return {success: false, message: "API returned status " + response.getStatusCode()};\n' +
            '            }\n' +
            '        } catch (error) {\n' +
            '            return {success: false, message: error.message};\n' +
            '        }\n' +
            '    }\n' +
            '};';\n\n" +
        
        scriptIncludeGR.setValue('name', 'CountryIntegration');\n" +
        scriptIncludeGR.setValue('script', scriptCode);\n" +
        scriptIncludeGR.setValue('active', true);\n" +
        scriptIncludeGR.setValue('access', 'package_private');\n" +
        scriptIncludeGR.setValue('description', 'Country Integration - REST Countries API integration for location dropdowns');\n" +
        \n" +
        if (exists) {\n" +
            scriptIncludeGR.update();\n" +
            gs.info('✓ Updated existing Script Include');\n" +
        } else {\n" +
            scriptIncludeGR.insert();\n" +
            gs.info('✓ Created new Script Include');\n" +
        }\n" +
        \n" +
        results.scriptInclude = true;\n" +
        \n" +
    } catch (error) {\n" +
        results.errors.push('Script Include: ' + error.message);\n" +
        gs.error('✗ Script Include failed: ' + error.message);\n" +
    }\n" +
    \n" +
    // ==========================================\n" +
    // STEP 2: POPULATE COUNTRIES\n" +
    // ==========================================\n" +
    gs.info('STEP 2: Populating country choice list...');\n" +
    \n" +
    try {\n" +
        var integration = new CountryIntegration();\n" +
        var syncResult = integration.syncCountries();\n" +
        \n" +
        if (syncResult.success) {\n" +
            results.countries = syncResult.total || 0;\n" +
            gs.info('✓ Country sync: ' + syncResult.message);\n" +
        } else {\n" +
            results.errors.push('Country sync: ' + syncResult.message);\n" +
            gs.error('✗ Country sync failed: ' + syncResult.message);\n" +
        }\n" +
        \n" +
    } catch (error) {\n" +
        results.errors.push('Country population: ' + error.message);\n" +
        gs.error('✗ Country population error: ' + error.message);\n" +
    }\n" +
    \n" +
    // ==========================================\n" +
    // STEP 3: CREATE SCHEDULED JOB (OPTIONAL)\n" +
    // ==========================================\n" +
    gs.info('STEP 3: Creating scheduled job (optional)...');\n" +
    \n" +
    try {\n" +
        var jobGR = new GlideRecord('sysauto_script');\n" +
        jobGR.addQuery('name', 'Country Data Sync');\n" +
        jobGR.query();\n" +
        \n" +
        var jobExists = jobGR.next();\n" +
        if (!jobExists) {\n" +
            jobGR = new GlideRecord('sysauto_script');\n" +
            jobGR.initialize();\n" +
        }\n" +
        \n" +
        var jobScript = \n" +
            '// Automated Country Data Sync\\n' +\n" +
            'try {\\n' +\n" +
            '    var integration = new CountryIntegration();\\n' +\n" +
            '    var result = integration.syncCountries();\\n' +\n" +
            '    if (result.success) {\\n' +\n" +
            '        gs.info(\"Country Sync Success: \" + result.message);\\n' +\n" +
            '    } else {\\n' +\n" +
            '        gs.error(\"Country Sync Failed: \" + result.message);\\n' +\n" +
            '    }\\n' +\n" +
            '} catch (error) {\\n' +\n" +
            '    gs.error(\"Country Sync Error: \" + error.message);\\n' +\n" +
            '}';\n" +
        \n" +
        jobGR.setValue('name', 'Country Data Sync');\n" +
        jobGR.setValue('script', jobScript);\n" +
        jobGR.setValue('active', false); // Start inactive\n" +
        jobGR.setValue('run_type', 'periodically');\n" +
        jobGR.setValue('run_period', '1 week');\n" +
        jobGR.setValue('description', 'Weekly update of country choice list from REST Countries API');\n" +
        \n" +
        if (jobExists) {\n" +
            jobGR.update();\n" +
            gs.info('✓ Updated scheduled job (inactive)');\n" +
        } else {\n" +
            jobGR.insert();\n" +
            gs.info('✓ Created scheduled job (inactive)');\n" +
        }\n" +
        \n" +
        results.scheduledJob = true;\n" +
        \n" +
    } catch (error) {\n" +
        results.errors.push('Scheduled job: ' + error.message);\n" +
        gs.error('✗ Scheduled job failed: ' + error.message);\n" +
    }\n" +
    \n" +
    // ==========================================\n" +
    // STEP 4: VERIFICATION\n" +
    // ==========================================\n" +
    gs.info('STEP 4: Running verification...');\n" +
    \n" +
    try {\n" +
        // Test API\n" +
        var testIntegration = new CountryIntegration();\n" +
        var connTest = testIntegration.testConnection();\n" +
        gs.info('API Test: ' + (connTest.success ? '✓ PASS' : '✗ FAIL - ' + connTest.message));\n" +
        \n" +
        // Count countries\n" +
        var countGR = new GlideRecord('sys_choice');\n" +
        countGR.addQuery('name', 'cmn_location');\n" +
        countGR.addQuery('element', 'country');\n" +
        countGR.query();\n" +
        \n" +
        var totalCount = 0;\n" +
        var dkFound = false;\n" +
        var samples = [];\n" +
        \n" +
        while (countGR.next()) {\n" +
            totalCount++;\n" +
            var value = countGR.getValue('value');\n" +
            var label = countGR.getValue('label');\n" +
            \n" +
            if (value === 'DK') dkFound = true;\n" +
            if (samples.length < 5) samples.push(value + '->' + label);\n" +
        }\n" +
        \n" +
        gs.info('Country Verification:');\n" +
        gs.info('  Total countries: ' + totalCount);\n" +
        gs.info('  Denmark (DK): ' + (dkFound ? '✓ Found' : '✗ Missing'));\n" +
        gs.info('  Samples: ' + samples.join(', '));\n" +
        \n" +
    } catch (error) {\n" +
        gs.error('Verification error: ' + error.message);\n" +
    }\n" +
    \n" +
    // ==========================================\n" +
    // FINAL RESULTS\n" +
    // ==========================================\n" +
    var duration = (new Date().getTime() - results.startTime.getTime()) / 1000;\n" +
    \n" +
    gs.info('===============================================');\n" +
    gs.info('COUNTRY INTEGRATION DEPLOYMENT COMPLETE');\n" +
    gs.info('===============================================');\n" +
    gs.info('📊 RESULTS:');\n" +
    gs.info('   Duration: ' + duration + ' seconds');\n" +
    gs.info('   Script Include: ' + (results.scriptInclude ? '✓' : '✗'));\n" +
    gs.info('   Countries: ' + results.countries);\n" +
    gs.info('   Scheduled Job: ' + (results.scheduledJob ? '✓ (inactive)' : '✗'));\n" +
    gs.info('   Errors: ' + results.errors.length);\n" +
    \n" +
    if (results.errors.length > 0) {\n" +
        gs.info('❌ ERRORS:');\n" +
        for (var e = 0; e < results.errors.length; e++) {\n" +
            gs.error('   ' + (e+1) + '. ' + results.errors[e]);\n" +
        }\n" +
    }\n" +
    \n" +
    gs.info('');\n" +
    gs.info('🎯 NEXT STEPS:');\n" +
    gs.info('   1. Test: Configuration > Location > New');\n" +
    gs.info('   2. Check the Country dropdown field');\n" +
    gs.info('   3. Verify Denmark and other countries appear');\n" +
    gs.info('   4. Optionally activate scheduled job for updates');\n" +
    \n" +
    gs.info('');\n" +
    gs.info('🔧 MANUAL COMMANDS:');\n" +
    gs.info('   Test: var ci = new CountryIntegration(); ci.testConnection();');\n" +
    gs.info('   Sync: var ci = new CountryIntegration(); ci.syncCountries();');\n" +
    \n" +
    gs.info('');\n" +
    gs.info('🌍 INTEGRATION DETAILS:');\n" +
    gs.info('   • REST Countries API (restcountries.com)');\n" +
    gs.info('   • HTTPS encrypted, no API keys required');\n" +
    gs.info('   • ~250 countries with ISO codes');\n" +
    gs.info('   • Automatic retry logic and error handling');\n" +
    gs.info('   • Choice list for cmn_location.country field');\n" +
    \n" +
    if (results.scriptInclude && results.countries > 200) {\n" +
        gs.info('');\n" +
        gs.info('🎉 SUCCESS! Country integration is ready!');\n" +
        gs.info('   Your ServiceNow PDI now has ' + results.countries + ' countries available.');\n" +
    } else {\n" +
        gs.info('');\n" +
        gs.info('⚠️  Deployment incomplete - review errors above');\n" +
    }\n" +
    \n" +
    gs.info('===============================================');\n" +
    \n" +
} catch (error) {\n" +
    gs.error('===============================================');\n" +
    gs.error('CRITICAL DEPLOYMENT ERROR');\n" +
    gs.error('===============================================');\n" +
    gs.error('Message: ' + error.message);\n" +
    gs.error('Details: ' + error.toString());\n" +
    gs.error('===============================================');\n" +
}
