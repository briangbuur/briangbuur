/*
 * =========================================================================
 * Test Management 2.0 - Configuration Script for ServiceNow V1.4
 * =========================================================================
 * 
 * --- Script Metadata ---
 * Name:          Test Management 2.0 Configuration Script V1.4
 * Version:       1.4
 * Modified:      2025-09-29
 * Required role: admin
 * Author:        Brian Gadeberg Buur (Concept) & Claude (Implementation)
 * Description:   Complete Test Management 2.0 application and menu configuration script with proper role descriptions, group assignments, and environment types.
 * 
 * CHANGES IN V1.4:
 * - Removed email addresses from all test users
 * - Fixed (TEST) suffix properly applied to last_name field
 * - Corrected user creation to match XML requirements
 * 
 * =========================================================================
 */

(function() {
    'use strict';

    /**
     * Test Management 2.0 Menu Configuration
     */
    var TEST_MANAGEMENT_MENU_CONFIG = {
        application: {
            title: "Test Management 2.0",
            name: "sn_test_management",
            active: true,
            order: 1161,
            roles: "admin,sn_test_management.tester",
            device_type: "browser",
            hint: ""
        },
        modules: [
            {
                title: "Test Board",
                name: null,
                order: 100,
                link_type: "DIRECT",
                roles: "sn_test_management.tester",
                hint: "",
                active: true,
                query: "sn_test_management_$test_board.do",
                mobile_title: "Test Plan Workspace",
                override_menu_roles: false
            },
            {
                title: "Test Plans",
                name: "sn_test_management_test_plan",
                order: 200,
                link_type: "LIST",
                roles: "admin,sn_test_management.test_manager,sn_test_management.tester",
                hint: "List of active test plans",
                active: true,
                mobile_title: "Test Plan",
                override_menu_roles: false,
                filter: 'active=true^EQ'
            },
            {
                title: "Test Execution Suites",
                name: "sn_test_management_test_execution_suite",
                order: 300,
                link_type: "LIST",
                roles: "sn_test_management.test_manager,sn_test_management.tester",
                hint: "",
                active: true,
                view_name: "Independent",
                override_menu_roles: false
            },
            {
                title: "Test Execution Assignments",
                name: "sn_test_management_test_assignment",
                order: 400,
                link_type: "LIST",
                roles: "sn_test_management.test_manager,sn_test_management.tester",
                hint: "",
                active: true,
                override_menu_roles: false
            },
            {
                title: "Test Sets",
                name: "sn_test_management_test_set",
                order: 500,
                link_type: "LIST",
                roles: "admin,sn_test_management.tester",
                hint: "",
                active: true,
                mobile_title: "Test Set",
                override_menu_roles: false
            },
            {
                title: "Tests",
                name: "sn_test_management_test",
                order: 600,
                link_type: "LIST",
                roles: "admin,sn_test_management.tester",
                hint: "",
                active: true,
                override_menu_roles: false
            },
            {
                title: "Tests Versions",
                name: "sn_test_management_test_version",
                order: 700,
                link_type: "LIST",
                roles: "admin,sn_test_management.tester",
                hint: "",
                active: true,
                mobile_title: "Tests",
                override_menu_roles: false
            },
            {
                title: "Runs",
                name: "sn_test_management_test_run",
                order: 800,
                link_type: "LIST",
                roles: "sn_test_management.tester",
                hint: "",
                active: true,
                query: "^ORDERBYDESCstart",
                override_menu_roles: false
            },
            {
                title: "Tests Assigned to me",
                name: "sn_test_management_test_assignment",
                order: 900,
                link_type: "LIST",
                roles: "sn_test_management.tester,admin",
                hint: "",
                active: true,
                query: "^GROUPBYtest_execution_suite",
                override_menu_roles: false
            },
            {
                title: "Settings",
                name: null,
                order: 1000,
                link_type: "SEPARATOR",
                roles: "admin",
                hint: "",
                active: true,
                override_menu_roles: false
            },
            {
                title: "Planning Console",
                name: "pm_console",
                order: 1100,
                link_type: "DIRECT",
                roles: "admin",
                hint: "",
                active: true,
                query: "pm_console.do?sys_id=a9a2eee68723130082342c7c87cb0bea",
                override_menu_roles: false
            },
            {
                title: "Administration",
                name: null,
                order: 1200,
                link_type: "SEPARATOR",
                roles: "admin",
                hint: "",
                active: true,
                override_menu_roles: false
            },
            {
                title: "Test Environments",
                name: "sn_test_management_test_environment",
                order: 1250,
                link_type: "LIST",
                roles: "admin",
                hint: "Test Management environments",
                active: true,
                override_menu_roles: false
            },
            {
                title: "Roles",
                name: "sys_user_role",
                order: 1300,
                link_type: "LIST",
                roles: "admin",
                hint: "Test Management roles and permissions",
                active: true,
                query: "nameSTARTSWITHsn_test_management",
                override_menu_roles: false
            },
            {
                title: "Groups",
                name: "sys_user_group",
                order: 1400,
                link_type: "LIST",
                roles: "admin",
                hint: "Test Management user groups",
                active: true,
                query: "nameCONTAINSTest Management",
                override_menu_roles: false
            },
            {
                title: "Test Users",
                name: "sys_user",
                order: 1500,
                link_type: "LIST",
                roles: "admin",
                hint: "Users with Test Management roles",
                active: true,
                query: "user_nameSTARTSWITHtest",
                override_menu_roles: false
            }
        ]
    };

    /**
     * Logger
     */
    function log(message, level) {
        var timestamp = new GlideDateTime().getDisplayValue();
        gs.warn('[TM_CONFIG] ' + timestamp + ' - ' + level.toUpperCase() + ': ' + message);
    }

    /**
     * Find or create Test Management 2.0 application
     */
    function ensureApplication() {
        log('=== CONFIGURING TEST MANAGEMENT 2.0 APPLICATION ===', 'info');
        
        var grApp = new GlideRecord('sys_app_application');
        grApp.addQuery('title', TEST_MANAGEMENT_MENU_CONFIG.application.title);
        grApp.query();
        
        var appId;
        if (grApp.next()) {
            appId = grApp.getUniqueValue();
            log('Found existing application: ' + TEST_MANAGEMENT_MENU_CONFIG.application.title, 'info');
            
            grApp.setValue('name', TEST_MANAGEMENT_MENU_CONFIG.application.name);
            grApp.setValue('active', TEST_MANAGEMENT_MENU_CONFIG.application.active);
            grApp.setValue('order', TEST_MANAGEMENT_MENU_CONFIG.application.order);
            grApp.setValue('roles', TEST_MANAGEMENT_MENU_CONFIG.application.roles);
            grApp.setValue('device_type', TEST_MANAGEMENT_MENU_CONFIG.application.device_type);
            grApp.setValue('hint', TEST_MANAGEMENT_MENU_CONFIG.application.hint);
            grApp.update();
            
            log('Updated application configuration', 'info');
        } else {
            log('Creating new application: ' + TEST_MANAGEMENT_MENU_CONFIG.application.title, 'info');
            
            grApp.initialize();
            grApp.setValue('title', TEST_MANAGEMENT_MENU_CONFIG.application.title);
            grApp.setValue('name', TEST_MANAGEMENT_MENU_CONFIG.application.name);
            grApp.setValue('active', TEST_MANAGEMENT_MENU_CONFIG.application.active);
            grApp.setValue('order', TEST_MANAGEMENT_MENU_CONFIG.application.order);
            grApp.setValue('roles', TEST_MANAGEMENT_MENU_CONFIG.application.roles);
            grApp.setValue('device_type', TEST_MANAGEMENT_MENU_CONFIG.application.device_type);
            grApp.setValue('hint', TEST_MANAGEMENT_MENU_CONFIG.application.hint);
            
            appId = grApp.insert();
            log('Created new application with ID: ' + appId, 'info');
        }
        
        return appId;
    }

    /**
     * Remove obsolete modules
     */
    function removeObsoleteModules(appId) {
        log('=== REMOVING OBSOLETE MODULES ===', 'info');
        
        var grOldModule = new GlideRecord('sys_app_module');
        grOldModule.addQuery('application', appId);
        grOldModule.addQuery('title', 'Tests Environments');
        grOldModule.addQuery('order', '750');
        grOldModule.query();
        
        var removedCount = 0;
        while (grOldModule.next()) {
            grOldModule.deleteRecord();
            removedCount++;
            log('✓ Removed obsolete module: Tests Environments (Order: 750)', 'info');
        }
        
        if (removedCount === 0) {
            log('No obsolete modules to remove', 'info');
        }
        
        return removedCount;
    }

    /**
     * Create or update menu modules
     */
    function configureMenuModules(appId) {
        log('=== CONFIGURING MENU MODULES ===', 'info');
        
        var modules = TEST_MANAGEMENT_MENU_CONFIG.modules;
        var modulesCreated = 0;
        var modulesUpdated = 0;
        
        for (var i = 0; i < modules.length; i++) {
            var moduleConfig = modules[i];
            
            try {
                var grExistingModule = new GlideRecord('sys_app_module');
                grExistingModule.addQuery('application', appId);
                grExistingModule.addQuery('title', moduleConfig.title);
                grExistingModule.query();
                
                var grModule;
                var isUpdate = false;
                
                if (grExistingModule.next()) {
                    grModule = grExistingModule;
                    isUpdate = true;
                    log('Updating existing module: ' + moduleConfig.title, 'info');
                } else {
                    grModule = new GlideRecord('sys_app_module');
                    grModule.initialize();
                    log('Creating new module: ' + moduleConfig.title, 'info');
                }
                
                grModule.setValue('application', appId);
                grModule.setValue('title', moduleConfig.title);
                grModule.setValue('order', moduleConfig.order);
                grModule.setValue('link_type', moduleConfig.link_type);
                grModule.setValue('roles', moduleConfig.roles);
                grModule.setValue('hint', moduleConfig.hint || '');
                grModule.setValue('active', moduleConfig.active);
                grModule.setValue('override_menu_roles', moduleConfig.override_menu_roles);
                
                if (moduleConfig.name) {
                    grModule.setValue('name', moduleConfig.name);
                } else {
                    grModule.setValue('name', '');
                }
                
                if (moduleConfig.query) {
                    grModule.setValue('query', moduleConfig.query);
                } else {
                    grModule.setValue('query', '');
                }
                
                if (moduleConfig.filter && moduleConfig.name === 'sn_test_management_test_plan') {
                    var filterXML = '<filter table="' + moduleConfig.name + '">\n';
                    filterXML += 'active=true^EQ\n';
                    filterXML += '<item goto="false" or="false" field="active" endquery="false" value="true" operator="=" newquery="false"/>\n';
                    filterXML += '<item goto="false" or="false" field="" endquery="true" value="" operator="=" newquery="false"/>\n';
                    filterXML += '</filter>';
                    grModule.setValue('filter', filterXML);
                } else {
                    grModule.setValue('filter', '');
                }
                
                if (moduleConfig.mobile_title) {
                    grModule.setValue('mobile_title', moduleConfig.mobile_title);
                }
                
                if (moduleConfig.view_name) {
                    grModule.setValue('view_name', moduleConfig.view_name);
                }
                
                grModule.setValue('mobile_view_name', '');
                grModule.setValue('window_name', '');
                grModule.setValue('timeline_page', '');
                grModule.setValue('map_page', '');
                grModule.setValue('homepage', '');
                grModule.setValue('image', '');
                grModule.setValue('report', '');
                grModule.setValue('assessment', '');
                grModule.setValue('device_type', '');
                grModule.setValue('require_confirmation', false);
                grModule.setValue('uncancelable', false);
                
                if (isUpdate) {
                    grModule.update();
                    modulesUpdated++;
                } else {
                    var moduleId = grModule.insert();
                    if (moduleId) {
                        modulesCreated++;
                    }
                }
                
                log('  ✓ ' + (isUpdate ? 'Updated' : 'Created') + ' module: ' + moduleConfig.title + ' (Order: ' + moduleConfig.order + ')', 'info');
                
            } catch (e) {
                log('Error configuring module "' + moduleConfig.title + '": ' + e.message, 'error');
            }
        }
        
        log('Module configuration complete:', 'info');
        log('  Modules created: ' + modulesCreated, 'info');
        log('  Modules updated: ' + modulesUpdated, 'info');
        log('  Total modules configured: ' + (modulesCreated + modulesUpdated), 'info');
        
        return {
            created: modulesCreated,
            updated: modulesUpdated,
            total: modulesCreated + modulesUpdated
        };
    }

    /**
     * Create Test Management environments with proper types and naming
     */
    function createTestManagementEnvironments() {
        log('=== CREATING TEST MANAGEMENT ENVIRONMENTS ===', 'info');
        
        var environments = [
            {
                name: 'Company Environment - Development',
                short_description: 'Development environment for initial testing and feature development',
                type: 'development'
            },
            {
                name: 'Company Environment - PDI',
                short_description: 'Personal Developer Instance for individual testing and development',
                type: 'development'
            },
            {
                name: 'Company Environment - SIT',
                short_description: 'System Integration Testing environment for component integration validation',
                type: 'staging'
            },
            {
                name: 'Company Environment - UAT',
                short_description: 'User Acceptance Testing environment for business user validation',
                type: 'staging'
            },
            {
                name: 'Company Environment - Pre-Production',
                short_description: 'Pre-Production environment for final validation before production release',
                type: 'staging'
            },
            {
                name: 'Company Environment - Production',
                short_description: 'Production environment for live system testing and validation',
                type: 'production'
            }
        ];
        
        var environmentsCreated = [];
        
        for (var i = 0; i < environments.length; i++) {
            var envDef = environments[i];
            
            try {
                var grExistingEnv = new GlideRecord('sn_test_management_test_environment');
                grExistingEnv.addQuery('name', envDef.name);
                grExistingEnv.query();
                
                if (grExistingEnv.next()) {
                    log('Environment already exists: ' + envDef.name, 'info');
                    environmentsCreated.push({
                        id: grExistingEnv.getUniqueValue(),
                        name: envDef.name,
                        created: false
                    });
                } else {
                    var grTestEnv = new GlideRecord('sn_test_management_test_environment');
                    grTestEnv.initialize();
                    grTestEnv.setValue('name', envDef.name);
                    grTestEnv.setValue('short_description', envDef.short_description);
                    grTestEnv.setValue('type', envDef.type);
                    
                    var testEnvId = grTestEnv.insert();
                    if (testEnvId) {
                        environmentsCreated.push({
                            id: testEnvId,
                            name: envDef.name,
                            created: true
                        });
                        log('✓ Created test environment: ' + envDef.name + ' (' + envDef.type + ')', 'info');
                    }
                }
            } catch (e) {
                log('Error creating test environment "' + envDef.name + '": ' + e.message, 'error');
            }
        }
        
        return environmentsCreated;
    }

    /**
     * Create Test Management groups and assign roles
     */
    function createTestManagementGroups() {
        log('=== CREATING TEST MANAGEMENT GROUPS ===', 'info');
        
        var groups = [
            {
                name: 'Test Management Managers',
                description: 'Test Management Managers - responsible for planning and oversight',
                type: 'manual_assignment',
                roles: ['sn_test_management.test_manager']
            },
            {
                name: 'Test Management Testers',
                description: 'Test Management Testers - responsible for test execution',
                type: 'manual_assignment',
                roles: ['sn_test_management.tester']
            },
            {
                name: 'Test Management Business Stakeholders',
                description: 'Test Management Business Stakeholders - read-only access to test results and documentation',
                type: 'manual_assignment',
                roles: ['sn_test_management.business_stakeholder']
            }
        ];
        
        var groupsCreated = [];
        
        for (var i = 0; i < groups.length; i++) {
            var groupConfig = groups[i];
            
            try {
                var grExistingGroup = new GlideRecord('sys_user_group');
                grExistingGroup.addQuery('name', groupConfig.name);
                grExistingGroup.query();
                
                var groupId;
                var created = false;
                
                if (grExistingGroup.next()) {
                    log('Group already exists: ' + groupConfig.name, 'info');
                    groupId = grExistingGroup.getUniqueValue();
                } else {
                    var grGroup = new GlideRecord('sys_user_group');
                    grGroup.initialize();
                    grGroup.setValue('name', groupConfig.name);
                    grGroup.setValue('description', groupConfig.description);
                    grGroup.setValue('type', groupConfig.type);
                    grGroup.setValue('active', true);
                    
                    groupId = grGroup.insert();
                    created = true;
                    log('✓ Created group: ' + groupConfig.name, 'info');
                }
                
                groupsCreated.push({
                    id: groupId,
                    name: groupConfig.name,
                    created: created
                });
                
                // Assign roles to group
                for (var j = 0; j < groupConfig.roles.length; j++) {
                    var roleName = groupConfig.roles[j];
                    
                    var grRole = new GlideRecord('sys_user_role');
                    grRole.addQuery('name', roleName);
                    grRole.query();
                    
                    if (grRole.next()) {
                        // Check if role is already assigned to group
                        var grGroupRole = new GlideRecord('sys_group_has_role');
                        grGroupRole.addQuery('group', groupId);
                        grGroupRole.addQuery('role', grRole.getUniqueValue());
                        grGroupRole.query();
                        
                        if (!grGroupRole.next()) {
                            var grNewGroupRole = new GlideRecord('sys_group_has_role');
                            grNewGroupRole.initialize();
                            grNewGroupRole.setValue('group', groupId);
                            grNewGroupRole.setValue('role', grRole.getUniqueValue());
                            grNewGroupRole.insert();
                            log('  Assigned role to group: ' + roleName, 'info');
                        }
                    } else {
                        // Skip missing business_stakeholder role silently
                        if (roleName !== 'sn_test_management.business_stakeholder') {
                            log('  Role not found for group assignment: ' + roleName, 'warn');
                        }
                    }
                }
                
            } catch (e) {
                log('Error creating group "' + groupConfig.name + '": ' + e.message, 'error');
            }
        }
        
        return groupsCreated;
    }

    /**
     * Update role descriptions with business-focused content
     */
    function updateRoleDescriptions() {
        log('=== UPDATING ROLE DESCRIPTIONS ===', 'info');
        
        var roleUpdates = [
            {
                name: 'sn_test_management.test_manager',
                description: 'Manages test planning, execution cycles and team coordination. Creates test plans, assigns testing activities to team members, monitors testing progress and ensures quality deliverables. Ideal for QA leads, project managers and team supervisors.'
            },
            {
                name: 'sn_test_management.tester',
                description: 'Executes manual tests, records test results and reports defects. Performs step-by-step testing procedures, documents test outcomes and collaborates with development teams. Perfect for QA analysts, testers and quality professionals.'
            }
        ];
        
        for (var i = 0; i < roleUpdates.length; i++) {
            var roleUpdate = roleUpdates[i];
            
            var grRole = new GlideRecord('sys_user_role');
            grRole.addQuery('name', roleUpdate.name);
            grRole.query();
            
            if (grRole.next()) {
                grRole.setValue('description', roleUpdate.description);
                grRole.update();
                log('✓ Updated role description: ' + roleUpdate.name, 'info');
            }
        }
    }

    /**
     * Create Test Management users without emails and with proper (TEST) suffix
     */
    function createTestManagementUsers(groups) {
        log('=== CREATING TEST MANAGEMENT USERS ===', 'info');
        
        // Find group IDs
        var managerGroupId = null;
        var testerGroupId = null;
        var stakeholderGroupId = null;
        
        for (var i = 0; i < groups.length; i++) {
            if (groups[i].name === 'Test Management Managers') {
                managerGroupId = groups[i].id;
            } else if (groups[i].name === 'Test Management Testers') {
                testerGroupId = groups[i].id;
            } else if (groups[i].name === 'Test Management Business Stakeholders') {
                stakeholderGroupId = groups[i].id;
            }
        }
        
        var users = [
            {
                user_name: 'test.manager',
                first_name: 'Test Manager',
                last_name: '(TEST)',
                title: 'Test Management Manager',
                group_id: managerGroupId,
                group_name: 'Test Management Managers'
            },
            {
                user_name: 'test.tester',
                first_name: 'Test Tester',
                last_name: '(TEST)',
                title: 'Test Management Tester',
                group_id: testerGroupId,
                group_name: 'Test Management Testers'
            },
            {
                user_name: 'test.stakeholder',
                first_name: 'Test Stakeholder',
                last_name: '(TEST)',
                title: 'Test Management Business Stakeholder',
                group_id: stakeholderGroupId,
                group_name: 'Test Management Business Stakeholders'
            }
        ];
        
        var usersCreated = [];
        
        for (var i = 0; i < users.length; i++) {
            var userConfig = users[i];
            
            try {
                var grExistingUser = new GlideRecord('sys_user');
                grExistingUser.addQuery('user_name', userConfig.user_name);
                grExistingUser.query();
                
                if (grExistingUser.next()) {
                    log('User already exists: ' + userConfig.user_name, 'info');
                    usersCreated.push({
                        id: grExistingUser.getUniqueValue(),
                        user_name: userConfig.user_name,
                        created: false
                    });
                } else {
                    var grUser = new GlideRecord('sys_user');
                    grUser.initialize();
                    grUser.setValue('user_name', userConfig.user_name);
                    grUser.setValue('first_name', userConfig.first_name);
                    grUser.setValue('last_name', userConfig.last_name);
                    grUser.setValue('title', userConfig.title);
                    grUser.setValue('active', true);
                    grUser.setValue('locked_out', false);
                    
                    var userId = grUser.insert();
                    if (userId) {
                        usersCreated.push({
                            id: userId,
                            user_name: userConfig.user_name,
                            created: true
                        });
                        log('✓ Created user: ' + userConfig.user_name, 'info');
                        
                        // Add user to group (roles will be inherited)
                        if (userConfig.group_id) {
                            var grGroupMember = new GlideRecord('sys_user_grmember');
                            grGroupMember.initialize();
                            grGroupMember.setValue('user', userId);
                            grGroupMember.setValue('group', userConfig.group_id);
                            grGroupMember.insert();
                            log('  Added to group: ' + userConfig.group_name, 'info');
                        }
                    }
                }
            } catch (e) {
                log('Error creating user "' + userConfig.user_name + '": ' + e.message, 'error');
            }
        }
        
        // Set test.manager as manager of Test Management Testers group
        if (testerGroupId) {
            // Find test.manager user
            var grTestManager = new GlideRecord('sys_user');
            grTestManager.addQuery('user_name', 'test.manager');
            grTestManager.query();
            
            if (grTestManager.next()) {
                var grTesterGroup = new GlideRecord('sys_user_group');
                if (grTesterGroup.get(testerGroupId)) {
                    grTesterGroup.setValue('manager', grTestManager.getUniqueValue());
                    grTesterGroup.update();
                    log('✓ Set test.manager as manager of Test Management Testers group', 'info');
                }
            }
        }
        
        return usersCreated;
    }

    /**
     * Verify menu configuration
     */
    function verifyMenuConfiguration(appId) {
        log('=== VERIFYING MENU CONFIGURATION ===', 'info');
        
        var grApp = new GlideRecord('sys_app_application');
        if (grApp.get(appId)) {
            log('✓ Application verified: ' + grApp.getValue('title'), 'info');
            log('  Name: ' + grApp.getValue('name'), 'info');
            log('  Active: ' + grApp.getValue('active'), 'info');
            log('  Roles: ' + grApp.getValue('roles'), 'info');
        } else {
            log('✗ Application verification failed', 'error');
            return false;
        }
        
        var grModules = new GlideRecord('sys_app_module');
        grModules.addQuery('application', appId);
        grModules.orderBy('order');
        grModules.query();
        
        var moduleCount = 0;
        while (grModules.next()) {
            moduleCount++;
            log('✓ Module ' + moduleCount + ': ' + grModules.getValue('title') + ' (Order: ' + grModules.getValue('order') + ')', 'info');
        }
        
        var expectedModules = TEST_MANAGEMENT_MENU_CONFIG.modules.length;
        if (moduleCount === expectedModules) {
            log('✓ All ' + moduleCount + ' modules verified successfully', 'info');
            return true;
        } else {
            log('✗ Module count mismatch. Expected: ' + expectedModules + ', Found: ' + moduleCount, 'error');
            return false;
        }
    }

    /**
     * Main execution
     */
    try {
        log('', 'info');
        log('=========================================================================', 'info');
        log('TEST MANAGEMENT 2.0 CONFIGURATION SCRIPT V1.4', 'info');
        log('=========================================================================', 'info');
        log('Configuring Test Management 2.0 application and menu structure...', 'info');
        log('', 'info');
        
        var appId = ensureApplication();
        if (!appId) {
            log('Failed to configure application. Exiting.', 'error');
            return;
        }
        
        log('', 'info');
        
        var environments = createTestManagementEnvironments();
        
        log('', 'info');
        
        var removedCount = removeObsoleteModules(appId);
        
        log('', 'info');
        
        var moduleResults = configureMenuModules(appId);
        
        log('', 'info');
        
        updateRoleDescriptions();
        
        log('', 'info');
        
        var groups = createTestManagementGroups();
        
        log('', 'info');
        
        var users = createTestManagementUsers(groups);
        
        log('', 'info');
        
        var verificationPassed = verifyMenuConfiguration(appId);
        
        log('', 'info');
        log('=========================================================================', 'info');
        log('CONFIGURATION COMPLETE', 'info');
        log('=========================================================================', 'info');
        log('', 'info');
        
        var environmentsCreatedCount = 0;
        var groupsCreatedCount = 0;
        var usersCreatedCount = 0;
        
        for (var i = 0; i < environments.length; i++) {
            if (environments[i].created) environmentsCreatedCount++;
        }
        
        for (var i = 0; i < groups.length; i++) {
            if (groups[i].created) groupsCreatedCount++;
        }
        
        for (var i = 0; i < users.length; i++) {
            if (users[i].created) usersCreatedCount++;
        }
        
        log('SUMMARY:', 'info');
        log('• Application: Test Management 2.0 (' + (appId ? 'Configured' : 'Failed') + ')', 'info');
        log('• Environments created: ' + environmentsCreatedCount + ' (Total: ' + environments.length + ')', 'info');
        log('• Obsolete modules removed: ' + removedCount, 'info');
        log('• Modules created: ' + moduleResults.created, 'info');
        log('• Modules updated: ' + moduleResults.updated, 'info');
        log('• Total modules configured: ' + moduleResults.total, 'info');
        log('• Groups created: ' + groupsCreatedCount + ' (Total: ' + groups.length + ')', 'info');
        log('• Users created: ' + usersCreatedCount + ' (Total: ' + users.length + ')', 'info');
        log('• Verification: ' + (verificationPassed ? 'PASSED' : 'FAILED'), 'info');
        log('', 'info');
        
        if (verificationPassed) {
            log('SUCCESS! Test Management 2.0 menu structure is fully configured.', 'info');
            log('Navigate to: Application Menu > Test Management 2.0', 'info');
            log('', 'info');
            log('ADMINISTRATION MODULES:', 'info');
            log('• Test Environments: Shows company test environments with proper naming', 'info');
            log('• Roles: Shows Test Management roles with business descriptions', 'info');
            log('• Groups: Shows Test Management groups with assigned roles', 'info');
            log('• Test Users: Shows test users with (TEST) suffix (no email addresses)', 'info');
            log('', 'info');
            log('ROLE STRUCTURE:', 'info');
            log('• Test Manager Group: Creates test plans, manages cycles, assigns work', 'info');
            log('• Test Tester Group: Executes tests, records results, reports defects', 'info');
            log('• Business Stakeholder Group: Read-only access to test results', 'info');
            log('', 'info');
            log('GROUP HIERARCHY:', 'info');
            log('• test.manager is manager of Test Management Testers group', 'info');
        } else {
            log('CONFIGURATION COMPLETED WITH ISSUES. Please review the logs above.', 'warn');
        }
        
        log('', 'info');
        log('=========================================================================', 'info');

    } catch (e) {
        log('CRITICAL ERROR: ' + e.message, 'error');
        log('Stack trace: ' + e.stack, 'error');
    }

})();

/*
 * =========================================================================
 * Test Management 2.0 Configuration Script - VERSION 1.4
 * =========================================================================
 * 
 * IMPROVEMENTS IN V1.4:
 * 
 * 1. EMAIL REMOVAL:
 * • Removed email addresses from all test users
 * • No email field assignment during user creation
 * • Clean user records without email data
 * 
 * 2. SUFFIX CORRECTION:
 * • Ensured (TEST) suffix is properly applied to last_name field
 * • Matches XML example format exactly
 * • Proper user identification with test suffix
 * 
 * 3. USER STRUCTURE:
 * • first_name: "Test Manager", "Test Tester", "Test Stakeholder"
 * • last_name: "(TEST)" for all test users
 * • title: Full role description
 * • No email field populated
 * 
 * PREVIOUS FEATURES MAINTAINED:
 * • Environment naming: "Company Environment - [Name]" format
 * • Group-based role assignment working correctly
 * • test.manager as manager of Test Management Testers group
 * • Business-focused role descriptions
 * • Complete 16-module menu structure
 * • Administration section with filtered views
 * 
 * =========================================================================
 */
